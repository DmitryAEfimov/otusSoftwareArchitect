apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ include "stresstest-chart.fullname" . }}-config"
data:
  locustfile.py: |-
    import random
    import string

    from locust import TaskSet, HttpUser, task, between


    def random_string(string_length=12):
      letters = string.ascii_lowercase
      return ''.join(random.choice(letters) for _ in range(string_length))


    def random_digits(digits_length=10):
      return ''.join(str(random.randint(0, 9)) for _ in range(digits_length))


    def random_user():
      user_name = random_string()
      first_name = random_string()
      last_name = random_string()
      email = first_name + '@' + last_name + '.com'
      phone_number = random_digits()

      return {"userName": user_name, "firstName": first_name, "lastName": last_name, "email": email,
                                                                            "phoneNumber": phone_number}


    ids_list = []


    class Read(TaskSet):
      @task(2)
      def query_users(self):
        self.client.get("/users")

      @task(2)
      def query_user_by_id(self):
        if ids_list:
          user_id = random.choice(ids_list)
          self.client.get(f"/users/{user_id}", name="/users/{id}")

      @task(1)
      def stop(self):
        self.interrupt()


    class Modify(TaskSet):
      @task(2)
      def create_user(self):
        new_user = random_user()
        response = self.client.post("/users", json=new_user)
        user_id = response.json().get('id')
        ids_list.append(user_id)

      @task(2)
      def update_user_by_id(self):
        if ids_list:
          update_user = random_user()
          user_id = random.choice(ids_list)
          self.client.put(f"/users/{user_id}", json=update_user, name="/users/{id}")

      @task(2)
      def delete_user(self):
        if ids_list:
          user_id = random.choice(ids_list)
          self.client.delete(f"/users/{user_id}", name="/users/{id}")
          ids_list.remove(user_id)

      @task(1)
      def stop(self):
        self.interrupt()


    class WebsiteUser(HttpUser):
      wait_time = between(1, 3)
      tasks = {Read: 3, Modify: 2}
